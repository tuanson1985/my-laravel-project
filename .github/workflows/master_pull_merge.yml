name: Deploy test ssh

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: ${{ secrets.APP_NAME }}
    - name: Create .env
      run: |
        echo 'APP_NAME=${{ secrets.APP_NAME }}' >> .env
        echo 'APP_ENV=${{ secrets.APP_ENV }}' >> .env
        echo 'APP_KEY=${{ secrets.APP_KEY }}' >> .env
        echo 'APP_DEBUG=false' >> .env
        echo 'APP_TIMEZONE=${{ secrets.APP_TIMEZONE }}' >> .env
        echo 'APP_URL=${{ secrets.APP_URL }}' >> .env
        echo 'BCRYPT_ROUNDS=${{ secrets.BCRYPT_ROUNDS }}' >> .env
        echo 'DB_CONNECTION=${{ secrets.DB_CONNECTION }}' >> .env
        echo 'DB_HOST=${{ secrets.DB_HOST }}' >> .env
        echo 'DB_DATABASE=${{ secrets.DB_DATABASE }}' >> .env
        echo 'DB_USERNAME=admin' >> .env
        echo 'DB_PASSWORD= RZa7hp1TCbSa' >> .env
        echo 'SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}' >> .env
        echo 'SESSION_ENCRYPT=false' >> .env
        echo 'SESSION_PATH=/' >> .env
        echo 'SESSION_DOMAIN=null' >> .env
        echo 'BROADCAST_CONNECTION=${{ secrets.BROADCAST_CONNECTION }}' >> .env
        echo 'FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }}' >> .env
        echo 'QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}' >> .env
        echo 'CACHE_STORE=${{ secrets.CACHE_STORE }}' >> .env
        echo 'MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST }}' >> .env
        echo 'REDIS_CLIENT=${{ secrets.REDIS_CLIENT }}' >> .env
        echo 'REDIS_HOST=${{ secrets.REDIS_HOST }}' >> .env
        echo 'REDIS_PASSWORD=null' >> .env
        echo 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> .env
        echo 'MAIL_MAILER=${{ secrets.MAIL_MAILER }}' >> .env
        echo 'MAIL_HOST=${{ secrets.MAIL_HOST }}' >> .env
        echo 'MAIL_PORT=${{ secrets.MAIL_PORT }}' >> .env
        echo 'MAIL_USERNAME=null' >> .env
        echo 'MAIL_PASSWORD=null' >> .env
        echo 'MAIL_ENCRYPTION=null' >> .env
        echo 'MAIL_FROM_ADDRESS=hello@example.com' >> .env
        echo 'MAIL_FROM_NAME=APP_NAME' >> .env
        echo 'VITE_APP_NAME=${{ secrets.APP_NAME }}' >> .env
    # - name: Get composer cache directory
    #   id: composer-cache
    #   run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    # - name: Cache dependencies
    #   uses: actions/cache@v4
    #   with:
    #     path: ${{ steps.composer-cache.outputs.dir }}
    #     key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
    #     restore-keys: ${{ runner.os }}-composer-
    # - name: Install dependencies
    #   run: |
    #     composer update --ignore-platform-req=ext-sodium
    # - name: Install Dependencies
    #   run:
    #     composer update --ignore-platform-reqs
    #     composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    # - name: Create deployment artifact
    #   env:
    #     GITHUB_SHA: ${{ github.sha }}
    #   run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules *
    # - name: Store artifact for distribution
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: app-build
    #     path: ${{ github.sha }}.tar.gz
    - name: Telegram - notice process begin
      run: |
        curl -X POST \
          -H 'Content-Type: application/json' \
          -d '{"chat_id": "${{ secrets.TELEGRAM_DEPLOYMENT_CHANNEL_ID }}", "text": "ðŸš€ Báº¯t Ä‘áº§u deploy code DAILY", "disable_notification": false}' \
          https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage
    - name: Cáº¥u hÃ¬nh SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -t ed25519 -p ${{ secrets.SSH_PORT }} -H ${{ secrets.PUBLIC_IP }} >> ~/.ssh/known_hosts
